{-# LANGUAGE OverloadedStrings #-}
import qualified Data.Text as T

data SXML = Tag T.Text
          | Attr [(T.Text, T.Text)]
          | Data T.Text
          | SXML [SXML]

sxmlShow :: SXML -> T.Text
sxmlShow (Attr pairs) =
  T.intercalate " " [ mconcat [a,"=","\"",v,"\""]
                     | (a,v) <- pairs]
sxmlShow (Data text) =
  text
sxmlShow (Tag tag) =
  mconcat ["<", tag, ">"]
sxmlShow (SXML []) =
  ""
sxmlShow (SXML [Tag tag]) =
  sxmlShow (Tag tag)
sxmlShow (SXML (Tag tag:Attr pairs:rest))
  = mconcat [ mconcat [ "<"
                      , tag
                      , " "
                      , sxmlShow (Attr pairs)
                      , ">"
                      ]
            , sxmlShow (SXML rest)
            , "</"
            , tag
            , ">"
            ]
sxmlShow (SXML (Tag tag:rest)) =
  mconcat [ sxmlShow (Tag tag)
          , sxmlShow (SXML rest)
          , "</"
          , tag
          , ">"
          ]
sxmlShow (SXML (first:rest)) =
  mconcat [ sxmlShow first
          , sxmlShow (SXML rest)
          ]

instance Show SXML where
  show = T.unpack . sxmlShow

main :: IO ()
main = do
  let sxml = SXML
             [ Tag "html"
             , Attr [ ("lang", "en") ],
               SXML
               [ Tag "body"
               , Attr [ ("bgcolor", "grey")
                      , ("style", "font-family:'Courier New'")
                      ]
               , SXML
                 [ Tag "p"
                 , Data "Hello, world!"]
               , SXML
                 [ Tag "a"
                 , Attr [ ("href", "/page2") ]
                 , SXML [Tag "em"
                        , Data "GO TO"]
                 , Data " page 2..."]]]
  putStrLn $ show sxml

